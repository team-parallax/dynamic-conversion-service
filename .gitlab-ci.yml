cache:
  paths:
    - .yarn/

stages:
  - lint
  - prepare
  - test
  - build
  - review
  - deliver
  - release


# Workflow rules for MR-Pipelines taken from docs at docs.gitlab.com:
# https://docs.gitlab.com/ee/ci/yaml/#switch-between-branch-pipelines-and-merge-request-pipelines
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_COMMIT_BRANCH || $CI_COMMIT_TAG


include:
  - local: packages/conversion-service/.gitlab-ci.yml
  - local: packages/auto-scaler/.gitlab-ci.yml
  - local: packages/redis/.gitlab-ci.yml
  - local: packages/logger/.gitlab-ci.yml

### Prepare - Stage
lint code:
  stage: lint
  before_script:
    - yarn install --cache .yarn --prefer-offline
  script:
    - yarn lerna run lint
  rules:
    - changes:
        - packages/**/*.ts
      when: always

# The steps below originally come from here, but the release_job step
# should wait for the docker build before creating a release
# https://gitlab.com/uulmhack/pipelines/auto-create-release/-/blob/master/.gitlab-ci.yml
prepare release:
  image: alpine:3.13
  stage: prepare
  before_script:
    - apk add --no-cache git
  script:
    - |
      echo "Generate diff from last release for the latest release"
      git diff --unified=0 HEAD~1 ./CHANGELOG.md | tail -n +6 | sed -e "s/^+//" > ./latestChanges.md
  artifacts:
    paths:
      - ./latestChanges.md
  rules:
    - if: '$CI_COMMIT_TAG'
      exists:
        - CHANGELOG.md

### Review Stage
code quality:
  allow_failure: true
  image: docker:stable
  services:
    - docker:stable-dind
  stage: review
  needs:
    - job: "lint code"
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://localhost:2375
    REPORT_FORMAT: json
    SOURCE_CODE: ${PWD}/src/
  before_script: []
  script:
    - echo "Generate Gitlab Code Quality Report"
    - |
      docker run \
        --env SOURCE_CODE="${PWD}" \
        --volume "${PWD}":/code \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.24" /code
  artifacts:
    paths:
      - gl-code-quality-report.json
    reports:
      codequality: gl-code-quality-report.json
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - changes:
        - src/**/*.ts
      when: always

### Release Stage 
release job:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script: []
  needs:
    - job: "prepare release"
      artifacts: true
    - job: "build docker"
    - job: "code quality"
  script:
    - echo "create gitlab-release for ${CI_COMMIT_TAG}"
  stage: release
  release:
    tag_name: $CI_COMMIT_TAG
    description: "./latestChanges.md"
  rules:
    - if: $CI_COMMIT_TAG