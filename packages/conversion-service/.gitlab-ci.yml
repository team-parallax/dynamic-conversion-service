default:
  image: teamparallax/conversion-service-base-image:v0.1.0
  interruptible: true

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .npm/

stages:
  - prepare
  - test
  - build
  - quality
  - release


# Workflow rules for MR-Pipelines taken from docs at docs.gitlab.com:
# https://docs.gitlab.com/ee/ci/yaml/#switch-between-branch-pipelines-and-merge-request-pipelines
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS && $CI_PIPELINE_SOURCE == "push"
      when: never
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH || $CI_COMMIT_TAG


before_script:
  - yarn install --cache .npm --prefer-offline

build_docker:
  stage: build
  services:
    - docker:19.03.5-dind
  before_script: []
  image: docker:19.03.5-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_PASSWORD: ${DOCKER_PASSWORD}
    DOCKER_USER: ${DOCKER_USER}
    DOCKER_TLS_CERTDIR: ""
    REGISTRY: docker.io
  script:
    - echo -n "${DOCKER_PASSWORD}" | docker login -u ${DOCKER_USER} --password-stdin ${REGISTRY}
    - docker build -t ${IMAGE_BASE_NAME}:${CI_COMMIT_TAG} -f ./Dockerfile .
    - docker push ${IMAGE_BASE_NAME}:${CI_COMMIT_TAG}
  rules:
    - if: $CI_COMMIT_TAG

test_lint_code:
  stage: test
  script:
    - yarn lint
  rules:
    - changes:
        - src/**/*.ts
      when: always

test_code:
  stage: test
  script:
    - yarn test:all:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    expire_in: 30 days
    paths:
      - junit.xml
    reports:
      junit: junit.xml
    untracked: false
    when: always
  rules:
    - changes:
        - src/**/*.ts
      when: always

test_quality:
  allow_failure: true
  image: docker:stable
  services:
    - docker:stable-dind
  stage: quality
  needs:
    - job: test_lint_code
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://localhost:2375
    REPORT_FORMAT: json
    SOURCE_CODE: ${PWD}/src/
  before_script: []
  script:
    - echo "Generate Gitlab Code Quality Report"
    - |
      docker run \
        --env SOURCE_CODE="${SOURCE_CODE}" \
        --volume "${PWD}":/code \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        "registry.gitlab.com/gitlab-org/ci-cd/codequality:0.85.24" /code
  artifacts:
    paths:
      - gl-code-quality-report.json
    reports:
      codequality: gl-code-quality-report.json
  rules:
    - if: '$CODE_QUALITY_DISABLED'
      when: never
    - changes:
        - src/**/*.ts
      when: always

# The steps below originally come from here, but the release_job step
# should wait for the docker build before creating a release
# https://gitlab.com/uulmhack/pipelines/auto-create-release/-/blob/master/.gitlab-ci.yml
prepare_release:
  image: alpine:3.13
  stage: prepare
  before_script:
    - apk add --no-cache git
  script:
    - |
      echo "Generate diff from last release for the latest release"
      git diff --unified=0 HEAD~1 ./CHANGELOG.md | tail -n +6 | sed -e "s/^+//" > ./latestChanges.md
  artifacts:
    paths:
      - ./latestChanges.md
  rules:
    - if: '$CI_COMMIT_TAG'
      exists:
        - CHANGELOG.md

release_job:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script: []
  needs:
    - job: build_docker
    - job: prepare_release
      artifacts: true
  script:
    - echo "create gitlab-release for ${CI_COMMIT_TAG}"
  stage: release
  release:
    tag_name: $CI_COMMIT_TAG
    description: "./latestChanges.md"
  rules:
    - if: $CI_COMMIT_TAG
