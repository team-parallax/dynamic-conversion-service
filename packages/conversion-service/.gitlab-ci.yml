default:
  image: teamparallax/conversion-service-base-image:v0.1.0

cache:
  key: "$CI_COMMIT_REF_SLUG"
  paths:
    - .npm/

stages:
  - prepare
  - test
  - build
  - release

# Workflow rules for MR-Pipelines taken from gitlab.com
workflow:
  rules:
    - if: $CI_COMMIT_TAG

include:
  - template: 'Workflows/MergeRequest-Pipelines.gitlab-ci.yml'
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'


before_script:
  - yarn install --cache .npm --prefer-offline

build_docker:
  stage: build
  services:
    - docker:19.03.5-dind
  before_script: []
  image: docker:19.03.5-dind
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_PASSWORD: ${DOCKER_PASSWORD}
    DOCKER_USER: ${DOCKER_USER}
    DOCKER_TLS_CERTDIR: ""
    REGISTRY: docker.io
  script:
    - echo -n "${DOCKER_PASSWORD}" | docker login -u ${DOCKER_USER} --password-stdin ${REGISTRY}
    - docker build -t ${IMAGE_BASE_NAME}:${CI_COMMIT_TAG} -f ./Dockerfile .
    - docker push ${IMAGE_BASE_NAME}:${CI_COMMIT_TAG}
  rules:
    - if: $CI_COMMIT_TAG

lint_code:
  stage: prepare
  script:
    - yarn lint


test_all:
  stage: test
  script:
    - yarn test:all:ci
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/
  artifacts:
    when: always
    expire_in: 30 days
    untracked: false
    reports:
      junit: junit.xml

# The steps below originally come from here, but the release_job step
# should wait for the docker build before creating a release
# https://gitlab.com/uulmhack/pipelines/auto-create-release/-/blob/master/.gitlab-ci.yml
prepare_release:
  image: alpine:3.13
  stage: prepare
  before_script:
    - apk add --no-cache git
  script:
    - |
      echo "Generate diff from last release for the latest release"
      git diff --unified=0 HEAD~1 ./CHANGELOG.md | tail -n +6 | sed -e "s/^+//" > ./latestChanges.md
  artifacts:
    paths:
      - ./latestChanges.md
  rules:
    - if: '$CI_COMMIT_TAG'
      exists:
        - CHANGELOG.md

release_job:
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script: []
  needs:
    - job: build_docker
    - job: prepare_release
      artifacts: true
  script:
    - echo "create gitlab-release for ${CI_COMMIT_TAG}"
  stage: release
  release:
    tag_name: $CI_COMMIT_TAG
    description: "./latestChanges.md"
  rules:
    - if: $CI_COMMIT_TAG

